---
Description: Amazon CloudWatch Synthetics for API monitoring
Parameters: 
  APIUrl: 
    Description: The URL to test
    Type: String
  CanaryName: 
    Description: Name of the canary test
    Type: String
Resources:
  CloudWatchSyntheticsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-${AWS::Region}
      Description: CloudWatch Synthetics lambda execution role for running canaries
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
  RolePermissions:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - Ref: CloudWatchSyntheticsRole
      PolicyName:
        Fn::Sub: CloudWatchSyntheticsPolicy-${AWS::Region}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetBucketLocation
            Resource:
              - Fn::Sub: arn:aws:s3:::${ResultsBucket}/*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: '*'
          - Effect: Allow
            Resource: '*'
            Action: cloudwatch:PutMetricData
            Condition:
              StringEquals:
                cloudwatch:namespace: CloudWatchSynthetics
                
#### Result Bukcet ##### 

  ResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-results-${AWS::AccountId}-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CodeBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-code-${AWS::AccountId}-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 180
            Status: Enabled
            
  ##### Synthetics Canary creation #########
  
  SyntheticsCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: !Ref CanaryName
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${CloudWatchSyntheticsRole}
      Code:
        Handler: apiCanaryBlueprint.handler
        Script: !Sub |
          var synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');

          const apiCanaryBlueprint = async function () {

          // Handle validation for positive scenario
          const validateSuccessfull = async function(res) {
          return new Promise((resolve, reject) => {
          if (res.statusCode < 200 || res.statusCode > 299) {
          throw res.statusCode + ' ' + res.statusMessage;
          }

          let responseBody = '';
          res.on('data', (d) => {
          responseBody += d;
          });

          res.on('end', () => {
          // Add validation on 'responseBody' here if required.
          resolve();
          });
          });
          };


          // Set request option for /pets-Get
          let requestOptionsStep1 = {
          hostname: 'apigatewayendpointURL',
          method: 'GET',
          path: '/test/pets',
          port: '443',
          protocol: 'https:',
          body: "",
          headers: {"type":"cat"}
          };
          requestOptionsStep1['headers']['User-Agent'] = [synthetics.getCanaryUserAgentString(), requestOptionsStep1['headers']['User-Agent']].join(' ');

          // Set step config option for /pets-Get
          let stepConfig1 = {
          includeRequestHeaders: true,
          includeResponseHeaders: true,
          includeRequestBody: true,
          includeResponseBody: true,
          restrictedHeaders: [],
          continueOnHttpStepFailure: true
          };

          await synthetics.executeHttpStep('/pets-Get', requestOptionsStep1, validateSuccessfull, stepConfig1);

          // Set request option for /pets-POST
          let requestOptionsStep2 = {
          hostname: 'apigatewayendpointURL',
          method: 'POST',
          path: '/test/pets',
          port: '443',
          protocol: 'https:',
          body: "{\n    \"type\": \"\"\n}",
          headers: {}
          };
          requestOptionsStep2['headers']['User-Agent'] = [synthetics.getCanaryUserAgentString(), requestOptionsStep2['headers']['User-Agent']].join(' ');

          // Set step config option for /pets-POST
          let stepConfig2 = {
          includeRequestHeaders: true,
          includeResponseHeaders: true,
          includeRequestBody: true,
          includeResponseBody: true,
          restrictedHeaders: [],
          continueOnHttpStepFailure: true
          };

          await synthetics.executeHttpStep('/pets-POST', requestOptionsStep2, validateSuccessfull, stepConfig2);


          };

          exports.handler = async () => {
          return await apiCanaryBlueprint();
          };
      ArtifactS3Location: !Sub s3://${ResultsBucket}
      RuntimeVersion: syn-nodejs-puppeteer-3.1
      Schedule:
        Expression: rate(1 hour)
        DurationInSeconds: 3600
      RunConfig:
        TimeoutInSeconds: 60
      FailureRetentionPeriod: 30
      SuccessRetentionPeriod: 30
      Tags:
      - Key: key00AtCreate
        Value: value001AtCreate
      StartCanaryAfterCreation: true
Outputs:
  CanaryUrl:
    Value: !Sub https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#synthetics:canary/detail/${CanaryName}
    Description: Canary URL
